name: GitHub Secrets Demo

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  # Public environment variables (visible in logs)
  APP_NAME: "Registration App"
  VERSION: "1.0.0"
  
  # Using secrets in environment variables
  API_URL: ${{ secrets.API_URL_SECRET }}
  DATABASE_URL: ${{ secrets.DATABASE_URL_SECRET }}

jobs:
  demo-secrets:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Demo 1 - Using secrets in environment variables
        run: |
          echo "App Name: $APP_NAME"
          echo "Version: $VERSION"
          echo "API URL: $API_URL"
          echo "Database URL: $DATABASE_URL"
          # Note: Secrets are masked in logs automatically

      - name: Demo 2 - Using secrets in Docker build args
        run: |
          echo "Building with secrets as build arguments..."
          # Example of how you'd use secrets in docker build
          docker build \
            --build-arg API_URL="$API_URL" \
            --build-arg DATABASE_URL="$DATABASE_URL" \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            -t demo-app .

      - name: Demo 3 - Using secrets in conditional logic
        if: ${{ secrets.ENABLE_FEATURE == 'true' }}
        run: |
          echo "Feature is enabled!"
          echo "Feature config: ${{ secrets.FEATURE_CONFIG }}"

      - name: Demo 4 - Using secrets in file creation
        run: |
          # Create a config file with secrets (be careful with this!)
          cat > config.json << EOF
          {
            "apiUrl": "$API_URL",
            "databaseUrl": "$DATABASE_URL",
            "secretKey": "${{ secrets.SECRET_KEY }}",
            "featureEnabled": "${{ secrets.ENABLE_FEATURE }}"
          }
          EOF
          
          # Show the file (secrets will be masked)
          echo "Config file created:"
          cat config.json

      - name: Demo 5 - Using secrets in matrix strategy
        strategy:
          matrix:
            environment: [staging, production]
        run: |
          echo "Deploying to ${{ matrix.environment }}"
          echo "Environment-specific secret: ${{ secrets[format('{0}_SECRET', matrix.environment)] }}"

      - name: Demo 6 - Using secrets with different outputs
        id: config
        run: |
          # Set outputs that can be used in later steps
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "db_url=$DATABASE_URL" >> $GITHUB_OUTPUT
          echo "has_secret=${{ secrets.SECRET_KEY != '' }}" >> $GITHUB_OUTPUT

      - name: Demo 7 - Using outputs from previous step
        run: |
          echo "API URL from output: ${{ steps.config.outputs.api_url }}"
          echo "DB URL from output: ${{ steps.config.outputs.db_url }}"
          echo "Has secret: ${{ steps.config.outputs.has_secret }}"

      - name: Demo 8 - Using secrets in different contexts
        run: |
          # Secrets work in different contexts
          echo "Direct secret access: ${{ secrets.SECRET_KEY }}"
          echo "Secret in env var: $SECRET_KEY"
          echo "Secret in conditional: ${{ secrets.ENABLE_FEATURE == 'true' && 'enabled' || 'disabled' }}"

  demo-docker-secrets:
    runs-on: ubuntu-latest
    needs: demo-secrets
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Demo 9 - Using secrets in Docker Compose
        run: |
          # Create a docker-compose file that uses secrets
          cat > docker-compose.demo.yml << EOF
          version: '3.8'
          services:
            app:
              image: nginx:alpine
              environment:
                - API_URL=${{ secrets.API_URL_SECRET }}
                - DATABASE_URL=${{ secrets.DATABASE_URL_SECRET }}
                - SECRET_KEY=${{ secrets.SECRET_KEY }}
              ports:
                - "8080:80"
          EOF
          
          echo "Docker Compose file created with secrets"

      - name: Demo 10 - Using secrets in multi-line scripts
        run: |
          # Multi-line script with secrets
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e
          
          echo "Starting deployment..."
          echo "API URL: $API_URL"
          echo "Database URL: $DATABASE_URL"
          
          # Use secrets in deployment logic
          if [ "$ENABLE_FEATURE" = "true" ]; then
            echo "Feature is enabled"
            echo "Feature config: $FEATURE_CONFIG"
          else
            echo "Feature is disabled"
          fi
          
          echo "Deployment complete!"
          EOF
          
          chmod +x deploy.sh
          # Run with secrets as environment variables
          API_URL="${{ secrets.API_URL_SECRET }}" \
          DATABASE_URL="${{ secrets.DATABASE_URL_SECRET }}" \
          ENABLE_FEATURE="${{ secrets.ENABLE_FEATURE }}" \
          FEATURE_CONFIG="${{ secrets.FEATURE_CONFIG }}" \
          ./deploy.sh
